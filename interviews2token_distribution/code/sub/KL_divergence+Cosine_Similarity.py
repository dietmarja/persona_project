import numpy as npfrom scipy.spatial.distance import cosinefrom scipy.stats import entropyimport pandas as pddef calculate_kl_divergence(token_df):    """    Calculate the KL Divergence matrix for personas based on token distributions.        Args:    - token_df: DataFrame containing token distributions with Persona, Token, Count columns.        Returns:    - kl_matrix: n x n matrix of KL Divergence values.    """    # Pivot the DataFrame to get a matrix with personas as rows, tokens as columns    persona_token_matrix = token_df.pivot_table(index='Persona', columns='Token', values='Count', fill_value=0)        personas = persona_token_matrix.index    n = len(personas)        kl_matrix = np.zeros((n, n))    for i in range(n):        for j in range(n):            if i != j:                p = persona_token_matrix.iloc[i]                q = persona_token_matrix.iloc[j]                # Normalize to form a valid probability distribution                p /= p.sum()                q /= q.sum()                kl_matrix[i, j] = entropy(p, q)        return pd.DataFrame(kl_matrix, index=personas, columns=personas)def calculate_cosine_similarity(token_df):    """    Calculate the Cosine Similarity matrix for personas based on token distributions.        Args:    - token_df: DataFrame containing token distributions with Persona, Token, Count columns.        Returns:    - cosine_matrix: n x n matrix of cosine similarity values.    """    # Pivot the DataFrame to get a matrix with personas as rows, tokens as columns    persona_token_matrix = token_df.pivot_table(index='Persona', columns='Token', values='Count', fill_value=0)        personas = persona_token_matrix.index    n = len(personas)        cosine_matrix = np.zeros((n, n))    for i in range(n):        for j in range(n):            if i != j:                p = persona_token_matrix.iloc[i]                q = persona_token_matrix.iloc[j]                cosine_matrix[i, j] = 1 - cosine(p, q)        return pd.DataFrame(cosine_matrix, index=personas, columns=personas)def save_matrices(kl_matrix, cosine_matrix, output_dir):    """    Save the KL divergence and cosine similarity matrices to CSV files.        Args:    - kl_matrix: DataFrame, KL Divergence matrix.    - cosine_matrix: DataFrame, Cosine Similarity matrix.    - output_dir: str, directory to save the output files.    """    kl_file = os.path.join(output_dir, 'kl_divergence_matrix.csv')    cosine_file = os.path.join(output_dir, 'cosine_similarity_matrix.csv')        kl_matrix.to_csv(kl_file)    cosine_matrix.to_csv(cosine_file)        print(f"KL Divergence matrix saved to {kl_file}")    print(f"Cosine Similarity matrix saved to {cosine_file}")
